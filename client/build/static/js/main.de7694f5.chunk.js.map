{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","cartOpen","cart","product","map","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","id","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","reportWebVitals"],"mappings":"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","file":"static/js/main.de7694f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n// wrapping in a Promise so it's easier to work with IndexedDB's asynchronous nature.\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n    \n  });\n}","import { useReducer } from \"react\";\nimport {\nUPDATE_PRODUCTS,\nADD_TO_CART,\nUPDATE_CART_QUANTITY,\nREMOVE_FROM_CART,\nADD_MULTIPLE_TO_CART,\nUPDATE_CATEGORIES,\nUPDATE_CURRENT_CATEGORY,\nCLEAR_CART,\nTOGGLE_CART\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\nswitch (action.type) {\n    case UPDATE_PRODUCTS:\n    return {\n        ...state,\n        products: [...action.products],\n    };\n\n    case ADD_TO_CART:\n    return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n    };\n\n    case ADD_MULTIPLE_TO_CART:\n    return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n    };\n\n    case UPDATE_CART_QUANTITY:\n    return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n        if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n        }\n        return product\n        })\n    };\n\n    case REMOVE_FROM_CART:\n    let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n    });\n\n    return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n    };\n\n    case CLEAR_CART:\n    return {\n        ...state,\n        cartOpen: false,\n        cart: []\n    };\n\n    case TOGGLE_CART:\n    return {\n        ...state,\n        cartOpen: !state.cartOpen\n    };\n\n    case UPDATE_CATEGORIES:\n    return {\n        ...state,\n        categories: [...action.categories],\n    };\n\n    case UPDATE_CURRENT_CATEGORY:\n    return {\n        ...state,\n        currentCategory: action.currentCategory\n    }\n\n    default:\n    return state;\n}\n};\n\nexport function useProductReducer(initialState) {\nreturn useReducer(reducer, initialState)\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n// create our own functionality to manage state at a global level and make it\n// available to all other components through a special <Provider> component\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: ''\n  });\n  // use this to confirm it works!\n  console.log(state);\n  // without {...props} in returning <Provider> component, nothing on the page would be rendered\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\n// When this function is executed from within a component, we will receive the\n// [state, dispatch] data our StoreProvider provider manages for us.\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      // when global state is updated, the update will also be reflected in IndexedDB so we can retrieve data from IndexedDB later\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    // if there's data to be stored store it in the global state object\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      console.log(data);\n      // take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      \n    // check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    \n    //if user changes the quantity to zero, delete item from cart \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n      \n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n            <input\n              type=\"number\"\n              placeholder=\"1\"\n              value={item.purchaseQuantity}\n              onChange={onChange}\n            />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  \n  // retrieve items in the cart\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  // The Hook runs on load no matter what, but then it only runs again if any value in dependency array has changed since the last time it ran\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n    \n    // loop over the items saved in state.cart and add their IDs to a new productIds array.\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\nexport default Cart;","import React from \"react\";\n// import Nav from \"../components/Nav\";\n// import CategoryMenu from \"../components/CategoryMenu\";\nimport ProductList from \"../components/ProductList\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if updating quantity, use existing item data & increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n  \n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete item from IndexedDB using `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to cart</button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n// import Nav from \"../components/Nav\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      {/* <Nav> */}\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Shrugging Person Emoji\">\n            🤷\n          </span>\n        </h1>\n      {/* </Nav> */}\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","\nimport React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\n// import Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n  \n  return (\n    <div>\n      {/* <Jumbotron> */}\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the homepage\n        </h2>\n      {/* </Jumbotron> */}\n    </div>\n  );\n};\n\nexport default Success;","    import React from 'react';\n    import { Link } from 'react-router-dom';\n\n    import { useQuery } from '@apollo/client';\n    import { QUERY_USER } from '../utils/queries';\n\n    function OrderHistory() {\n        const { data } = useQuery(QUERY_USER);\n        let user;\n\n    if (data) {\n        user = data.user;\n    }\n\n    return (\n    <>\n        <div className=\"container my-1\">\n            <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n            <>\n            <h2>\n                Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n                <div key={order._id} className=\"my-2\">\n                <h3>\n                    {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                    {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                        <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                        </Link>\n                        <div>\n                        <span>${price}</span>\n                        </div>\n                    </div>\n                    ))}\n                </div>\n                </div>\n            ))}\n            </>\n        ) : null}\n        </div>\n    </>\n    );\n    }\n\n    export default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}